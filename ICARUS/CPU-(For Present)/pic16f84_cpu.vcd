$date
	Sat Apr 05 12:08:50 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module pic16f84_cpu_tb $end
$var wire 8 ! port_b_tris [7:0] $end
$var wire 8 " port_b_data_out [7:0] $end
$var wire 5 # port_a_tris [4:0] $end
$var wire 5 $ port_a_data_out [4:0] $end
$var wire 13 % pc_out [12:0] $end
$var wire 1 & nop_out $end
$var reg 1 ' mclr $end
$var reg 14 ( op_code [13:0] $end
$var reg 5 ) port_a_data_in [4:0] $end
$var reg 8 * port_b_data_in [7:0] $end
$var reg 1 + q1 $end
$var reg 1 , q2 $end
$var reg 1 - q3 $end
$var reg 1 . q4 $end
$scope module uut $end
$var wire 1 ' mclr $end
$var wire 14 / op_code [13:0] $end
$var wire 5 0 port_a_data_in [4:0] $end
$var wire 8 1 port_b_data_in [7:0] $end
$var wire 1 + q1 $end
$var wire 1 , q2 $end
$var wire 1 - q3 $end
$var wire 1 . q4 $end
$var parameter 8 2 EEADR $end
$var parameter 8 3 EECON1 $end
$var parameter 8 4 EECON2 $end
$var parameter 8 5 EEDATA $end
$var parameter 8 6 FSR $end
$var parameter 8 7 INDF $end
$var parameter 8 8 INTCON $end
$var parameter 8 9 OPTION $end
$var parameter 8 : PCL $end
$var parameter 8 ; PCLATH $end
$var parameter 8 < PORTA $end
$var parameter 8 = PORTB $end
$var parameter 8 > STATUS $end
$var parameter 8 ? TMR0 $end
$var parameter 8 @ TRISA $end
$var parameter 8 A TRISB $end
$var reg 1 B ADDLW $end
$var reg 1 C ADDWF $end
$var reg 8 D ALU_OUT [7:0] $end
$var reg 1 E ANDLW $end
$var reg 1 F ANDWF $end
$var reg 1 G BCF $end
$var reg 1 H BSF $end
$var reg 1 I BTFSC $end
$var reg 1 J BTFSS $end
$var reg 1 K CALL $end
$var reg 11 L CALLnGOTO_LITERAL [10:0] $end
$var reg 1 M CLR $end
$var reg 1 N CLRWDT $end
$var reg 1 O COMF $end
$var reg 1 P DECF $end
$var reg 1 Q DECFSZ $end
$var reg 8 R F_ADDR [7:0] $end
$var reg 8 S F_REG [7:0] $end
$var reg 1 T GOTO $end
$var reg 11 U GOTO_CALL_LIT [10:0] $end
$var reg 1 V INCF $end
$var reg 1 W INCFSZ $end
$var reg 1 X IORLW $end
$var reg 1 Y IORWF $end
$var reg 8 Z K_LITERAL [7:0] $end
$var reg 1 [ MOVF $end
$var reg 1 \ MOVLW $end
$var reg 1 ] MOVWF $end
$var reg 1 ^ NOP $end
$var reg 13 _ PC [12:0] $end
$var reg 8 ` PCLATH_reg [7:0] $end
$var reg 8 a PCL_reg [7:0] $end
$var reg 1 b RETFIE $end
$var reg 1 c RETLW $end
$var reg 1 d RETURN $end
$var reg 1 e RLF $end
$var reg 1 f RRF $end
$var reg 8 g Register_F [7:0] $end
$var reg 1 h SLEEP $end
$var reg 13 i STACK_LEVEL [12:0] $end
$var reg 8 j STATUS_REG [7:0] $end
$var reg 1 k SUBLW $end
$var reg 1 l SUBWF $end
$var reg 1 m SWAPF $end
$var reg 8 n W_REG [7:0] $end
$var reg 1 o XORLW $end
$var reg 1 p XORWF $end
$var reg 3 q b [2:0] $end
$var reg 8 r bank0 [7:0] $end
$var reg 8 s bank1 [7:0] $end
$var reg 1 t bit_b $end
$var reg 9 u c_out [8:0] $end
$var reg 1 v d $end
$var reg 5 w dc_out [4:0] $end
$var reg 1 & nop_out $end
$var reg 13 x pc_out [12:0] $end
$var reg 5 y port_a_data_out [4:0] $end
$var reg 5 z port_a_tris [4:0] $end
$var reg 8 { port_b_data_out [7:0] $end
$var reg 8 | port_b_tris [7:0] $end
$var reg 3 } sp [2:0] $end
$var reg 3 ~ sp_out [2:0] $end
$var reg 1 !" tmp_cout $end
$var reg 1 "" tmp_msbF $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000110 A
b10000101 @
b1 ?
b11 >
b110 =
b101 <
b1010 ;
b10 :
b10000001 9
b1011 8
b0 7
b100 6
b1000 5
b10001001 4
b10001000 3
b1001 2
$end
#0
$dumpvars
0""
0!"
b0 ~
b0 }
bx |
bx {
bx z
bx y
bx x
b0 w
0v
b0 u
0t
b0 s
b0 r
b0 q
xp
xo
b0 n
xm
xl
xk
b0 j
b0 i
xh
b0 g
xf
xe
xd
xc
xb
b0 a
b0 `
b0 _
x^
x]
x\
x[
b0 Z
xY
xX
xW
xV
b0 U
xT
b0 S
b0 R
xQ
xP
xO
xN
xM
b0 L
xK
xJ
xI
xH
xG
xF
xE
b0 D
xC
xB
b0 1
b0 0
b0 /
0.
0-
0,
0+
b0 *
b0 )
b0 (
x'
0&
bx %
bx $
bx #
bx "
bx !
$end
#10
b1000 n
1'
#30
b10110010 s
b110010 r
b110010 R
1v
0h
0c
0b
0N
0d
0K
0T
0o
0k
0\
0X
0E
0B
0J
0I
0H
0G
0W
0Q
0^
0p
0M
0m
0f
0e
0]
0[
0Y
0V
0P
0O
0F
1l
0C
b11111111 !
b11111111 |
b11111 #
b11111 z
b1 a
b1 %
b1 x
b10 _
1+
b1010110010 (
b1010110010 /
#40
1,
0+
#50
b11111000 D
1-
0,
#60
b11000 j
b11111000 g
1&
1.
0-
#70
0.
#130
